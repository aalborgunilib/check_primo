#!/usr/bin/perl -w

# Nagios (and compatible) plugin to check and monitor the response time
# of searches performed in the ExLibris Primo library discovery system
#
# (c) 2015 Kasper LÃ¸vschall and Aalborg University Library
#
# This software is free software; you can redistribute it and/or modify
# it under the same terms as Perl itself.

use strict;
use warnings;

use Benchmark qw{:hireswallclock};
use URI::Escape;
use LWP::Simple;
use File::RandomLine;
use File::Basename;
use Monitoring::Plugin;

use vars qw($VERSION $PROGNAME $verbose $warn $critical $timeout $result);

$PROGNAME = basename($0);
$VERSION = "1.0.0";

# Instantiate plugin object
my $p = Monitoring::Plugin->new(
	usage => "Usage: %s
	[ -c|--critical=<critical threshold> ]
	[ -w|--warning=<warning threshold> ]
	[ -H|--hostname=<Primo server name> ]
	[ -p|--port=<port number> ]
	[ -I|--institution=<Primo institution> ]
	[ -P|--primocentral ]
	[ -L|--local ]
	[ -K|--keywords=<keyword1+keyword2+...> ]
	[ -t|--timeout=<timeout> ]",
	plugin => $PROGNAME,
	version => $VERSION,
	timeout => 15,
	blurb => 'This plugin will perform a search and check the response time of ExLibris Primo via X-Services.',
);

# Define command line options
$p->add_arg(
	spec => 'critical|c=i',
	help =>
	qq{-c, --critical=INTEGER
	Number of seconds for the response time to generate a critical state.},
	required => 1,
);

$p->add_arg(
	spec => 'warning|w=i',
	help =>
	qq{-w, --warning=INTEGER
	Number of seconds for the response time to generate a warning state. If
	omitted, no warning is generated.},
);

$p->add_arg(
	spec => 'hostname|H=s',
	help =>
	qq{-H, --hostname=URL
	The Primo X-Services host name or IP address.},
	required => 1,
);

$p->add_arg(
	spec => 'port|p=i',
	help =>
	qq{-p --port=INTEGER
	The Primo X-Services port number (defaults to 1701).},
	default => 1701,
);

$p->add_arg(
	spec => 'institution|I=s',
	help =>
	qq{-I, --institution=STRING
	The Primo institution.},
	required => 1,
);

$p->add_arg(
	spec => 'primocentral|P+',
	help =>
	qq{-P, --primocentral
	Perform the search in the Primo Central index.},
);

$p->add_arg(
	spec => 'local|L+',
	help =>
	qq{-L, --local
	Perform the search in the local index.},
);

$p->add_arg(
	spec => 'keywords|K=s',
	help =>
	qq{-K, --keywords
	One or more keywords (a search string) to search for.
	If no keywords are provided the plugin will randomly
	select a search string from a list of predefined
	searches. Please use '+' as keyword separator.},
);

# Parse arguments and process standard ones
$p->getopts;

# Sanity checks
if ( defined $p->opts->warning && ( $p->opts->warning > $p->opts->critical ) ) {
	$p->plugin_die("the warning threshold is set higher than the critical");
}

if ( (defined $p->opts->warning && $p->opts->warning >= $p->opts->timeout) || ($p->opts->critical >= $p->opts->timeout) ) {
	$p->plugin_die("the warning or critical threshold is set higher than or equal to the plugin timeout");
}

if ( ! defined $p->opts->local && ! defined $p->opts->primocentral ) {
	$p->plugin_die("no index provided - please add --local and/or --primocentral");
}

# Check if the file with Primo searches is available or keywords are specified
if ( -f dirname($0) . '/primo_searches.txt' || $p->opts->keywords ) {
	my $search_string;
	if ( $p->opts->keywords ) {
		$search_string = $p->opts->keywords;
	}
	else {
		# Pick a random line
		my $search = File::RandomLine->new(dirname($0) . '/primo_searches.txt', { algorithm => "uniform" });
		$search_string = $search->next;
	}

	# Clean up and escape the search string
	$search_string =~ s{\s$}{}sxmg;
	$search_string =~ s{\s}{+}sxmg;

	# Define the &loc parameter
	my $adaptor;
	if ( $p->opts->local && $p->opts->primocentral ) {
		$adaptor = '&loc=local&loc=adaptor,primo_central_multiple_fe';
	}
	elsif ( $p->opts->local ) {
		$adaptor = '&loc=local';
	}
	else {
		$adaptor = '&loc=adaptor,primo_central_multiple_fe';
	}

	# Crude build of the url to perform the search
	my $url = $p->opts->hostname . ':' . $p->opts->port .
	'/PrimoWebServices/xservice/search/brief?' .
	'institution=' . $p->opts->institution .
	'&onCampus=false' .
	'&indx=1' .
	'&bulkSize=1' .
	'&dym=false' .
	'&highlight=false' .
	$adaptor .
	'&query=any,contains,' . $search_string;

	# Enable and start counting down until timeout (this is the "mission critical" part)
	alarm $p->opts->timeout;

	# Time retrieval of the url
	my $response;
	my $exec_time = timeit( 1, sub{
			$response = get($url);
		} );

	alarm 0;

	# Get the total # of hits
	my $total_hits = $1 if ( $response && $response =~ m{
			TOTALHITS="(\d+?)"
		}sxm );

	# Die if the request failed or the response does not contain TOTALHITS="..."
	if ( ! $response || ! defined $total_hits ) {
		$p->plugin_die("the search failed or returned a non-response");
	}

	# Round the result to 3 digits
	$result = sprintf("%.3f", $exec_time->real);

	# Add performance data
	$p->add_perfdata(
		label => "Search time",
		value => $result,
		uom => 's',
		warning => $p->opts->warning,
		critical => $p->opts->critical,
	);

	# Evaluate threshold and return
	$p->plugin_exit(
		return_code => $p->check_threshold($result),
		message => " search was done in $result second(s): $total_hits hits"
	);
}
else {
	$p->plugin_die("the primo_searches.txt file could not be located and no keywords was specified");
}
